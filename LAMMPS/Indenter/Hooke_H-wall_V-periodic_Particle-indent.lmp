## Defining global variables -----------------------------------------------------
variable    disorder equal ${D}
variable	sigma_a equal  1+${disorder}
variable    sigma_b equal  1-${disorder}
variable    sigma_ab equal  (${sigma_a}+${sigma_b})/2
variable    alpha equal 1.1
variable 	r_cut_a equal ${sigma_a}*${alpha}
variable 	r_cut_b equal ${sigma_b}*${alpha}
variable 	r_cut_ab equal ${sigma_ab}*${alpha}
variable	seed equal 5008
variable	tstep equal  .0001
variable	rstep equal 10/${tstep}
variable 	r2step equal 10*${rstep}
variable	savestep equal 2/${tstep}
variable	F equal .5

variable   	n equal  50  # Total number will be NXN
variable   	TN equal ${n}*${n}
variable 	a equal  ${sigma_a}
variable 	c equal  2/(sqrt(3)*($a^2))
variable   	lx equal ($n)*$a
variable	Level equal (2*${n}^2)/(2*${n}-1)  # Even number of levels
variable   	ily equal ${a}*(${Level}-1)*sqrt(3)/2
## --------------------------------------------------------------------------------

## Define Domain ------------------------------------------------------------------
units lj
###Set the dimensionality of the simulation.
dimension 	2
###Sphere is used for granular models.  
###Args: diameter, mass, angular velocity 
atom_style	sphere
### Define boundary condition
### This command cannot be used after the simulation box is defined by a
### read_data or create_box command or #read_restart command.
### For 2d simulations, the z dimension must be periodic.
boundary    p fm p	# When force constrolled indenter is applied
### define box region. It is  geometric region of space.
variable	sw equal 2*${ily}
variable	lx1 equal ${lx}
region		box block 0 ${lx1} 0 ${sw} -.5 .5 units box
### Setting the pairwise newton flag to off means that if two interacting atoms 
### are on different processors, both processors compute #their interaction and 
### the resulting force information is not communicated. 
### LAMMPS should produce the same answers for any newton flag settings, except for round-off issues. 
### The newton bond setting cannot be changed after the simulation box is defined by a read_data or create_box command. 
newton   	off
### mean communicate velocity info with ghost atoms 
comm_modify    vel yes
### This command sets parameters that affect the building of pairwise neighbor lists.
neighbor    0.2 bin
### delay or every or check or once or cluster or include or exclude or page or one or binsize
neigh_modify    delay 0
### create the simulation box with one type of particle, based on the specified region.
### Thus a region command must first be used to define a geometric domain.
create_box 3 box

variable lo equal xlo
variable hi equal xhi
fix 	ylower all wall/gran hooke 1e5 0 0 0 0 0 yplane 0.0 NULL

## Inserting particles -----------------------------------------------------------
### Lattice stucture
lattice 	    hex ${c} origin 0.5 0.8 0.0
region          slab block 0.0 ${lx1} 0.0 ${ily} -.5 .5 units box

# variable   	    a equal ${dia2}
# lattice 	    sq $a origin 0.5 0.5 0.0
# region          slab block 0 ${lx} 0 ${ily} -.5 .5 units box

create_atoms    1 region slab units box

### Random Insertion (Settle time needs to be increased)
# create_atoms    1 random ${TN} ${seed} box

### Random Pour
# region    INslab block 1 ${lx} ${ly} ${ily} -.5 .5 units box
# fix       ins all pour 100 1 ${seed} vol 1 100 diam one ${dia1} region INslab vel -10 10 0 rate 0.0
group 			mobile type 1
set				group mobile type/fraction 2 ${F} 12345
set             type 1 diameter ${sigma_a}
set             type 2 diameter ${sigma_b}

## --------------------------------------------------------------------------------

## Particle Interaction Functions -------------------------------------------------
# pair_style		gran/hooke 1e5 NULL 1000.0 NULL 0.5 0

pair_style python 2
pair_coeff * * py_pot2.customhooke lj1 lj2 lj3
shell rm hooke11.table
shell rm hooke22.table
shell rm hooke33.table
shell rm hooke12.table
shell rm hooke13.table
shell rm hooke23.table
pair_write  1 1 2000001 r 0.1 ${r_cut_a} hooke11.table ENTRY1
pair_write  2 2 2000001 r 0.1 ${r_cut_b} hooke22.table ENTRY1
pair_write  1 2 2000001 r 0.1 ${r_cut_ab} hooke12.table ENTRY1

pair_style hybrid gran/hooke 1e5 0 0 0 0 0 table linear 2000001
pair_coeff 1 1 table hooke11.table ENTRY1
pair_coeff 2 2 table hooke22.table ENTRY1
pair_coeff 1 2 table hooke12.table ENTRY1
pair_coeff * 3 gran/hooke

## -------------------------------------------------------------------------------
# Specify simulation tpye
fix 	2d  all enforce2d
timestep	${tstep}

## Output Setup -------------------------------------------------------------------
variable        t equal "step*dt"
thermo	        ${savestep}
compute 		myTemp mobile temp
compute 		mypress all pressure myTemp virial
variable 		p2 equal "(c_mypress[1]+c_mypress[2])/2"
thermo_style 	custom atoms v_t step pe ke etotal lx ly lz press
compute         c1 all ke/atom
compute         c2 all pe/atom
compute         3 mobile stress/atom myTemp virial
compute         1 mobile property/local patom1 patom2 ptype1 ptype2
compute 	    2 mobile pair/local dist eng fx fy fz #p1 p2 p3
dump   	        1 all custom ${savestep} visualize.du &
								id type radius &
								x y z &
								vx vy vz &
								fx fy fz & 
								c_c1 c_c2 &
								c_3[1] c_3[2] c_3[3] c_3[4] c_3[5] c_3[6]
dump 	        2 mobile local ${savestep} dump.neigh index c_1[1] c_1[2] &
										            c_2[1] c_2[2] &
										            c_2[3] c_2[4] c_2[5]

## -------------------------------------------------------------------------------
# Relaxation
reset_timestep	0
fix             relax all box/relax x 0 vmax .001
minimize		1e-20  1e-20  100000  100000
unfix 	        relax
unfix 2d

fix		gravity_ all gravity .1 spherical 0.0 180.0
fix_modify gravity_ energy yes

fix 			nve_int all nve/sphere
fix 			damp all langevin 0 0 1 699483
run 			${r2step}

unfix			gravity_

reset_timestep	0

## Indenter Setup ----------------------------------------------------------------
reset_timestep	0
### Force Controlled Indenter (boundary type needs to be f m p)
variable      	dia equal lx/2
variable      	y equal (${ily}+${dia}/2)/ylat+2
variable      	x equal (xhi+xlo)/(2*xlat)
variable      	cc equal yhi
print         	"y is $y" 
print         	"y is ${cc}"
create_atoms  	3 single $x $y 0

set           	type 3 diameter ${dia}
group 		  	indent type 3
fix				3 indent setforce 0.0 NULL 0.0
fix				4 indent addforce 0.0 -1 0.0
fix_modify    	4 energy yes
thermo_style 	custom atoms v_t step pe ke etotal lx ly lz press f_4[2]
run				${r2step}
unfix damp

fix 			damp all langevin 0 0 0.001 699483
run 			${r2step}